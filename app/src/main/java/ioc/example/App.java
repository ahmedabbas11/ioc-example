/*
 * This source file was generated by the Gradle 'init' task
 */
package ioc.example;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;

public class App {
    private static IoCContainer container;
    public static void main(String[] args) {
        // Create the IoC container
        container = new IoCContainer();

        // Register the repository
        IRepository repository = new RepositoryImpl();
        container.register(IRepository.class, repository);

        // Register the service with the repository dependency
        IService service = new ServiceImpl(repository);
        container.register(IService.class, service);

        // Start the web server
        try {
        startServer();
        } catch(Exception e) {
            System.out.println("exception while starting server");
            e.printStackTrace();
        }

        // // Resolve the service from the container
        // IService resolvedService = container.resolve(IService.class);

        // // Use the resolved service
        // resolvedService.performAction("Hello, Inversion of Control!");
    }


    public static IoCContainer getContainer() {
        return container;
    }

    private static void startServer() throws Exception {
        Server server = new Server(8080);

        ServletContextHandler handler = new ServletContextHandler(ServletContextHandler.SESSIONS);
        handler.setContextPath("/");
        server.setHandler(handler);

        handler.addServlet(new ServletHolder(new MyServlet()), "/");
        // handler.addServletWithMapping(MyServlet.class, "/");


        server.start();
        System.out.println("***********************");
        System.out.println("server start at port 8080");
        System.out.println("***********************");
        server.join();
        
    }

}
